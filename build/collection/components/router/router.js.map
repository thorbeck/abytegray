{"version":3,"file":"router.js","sourceRoot":"","sources":["../../src/components/router/router.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAS5F,MAAM,OAAO,MAAM;;IAQjB,sCAAsC;IACtC,oBAAe,GAAG,KAAK,IAAI,EAAE;MAC3B,2BAA2B;MAE3B,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;MAEhE,mBAAmB;MACnB,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;MAEjH,wBAAwB;MACxB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;MAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC7B,CAAC,CAAC;;;;;;EAEF,yBAAyB;EAEzB,aAAa;IACX,IAAI,CAAC,eAAe,EAAE,CAAC;EACzB,CAAC;EAED,iBAAiB;IACf,aAAa;IACb,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IACtB,8CAA8C;IAC9C,MAAM,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE;MACzC,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAM;IACJ,OAAO,EAAC,IAAI,IAAC,SAAS,EAAE,IAAI,CAAC,MAAM,GAAS,CAAC;EAC/C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, h, Host, Prop, State, Watch } from '@stencil/core';\r\n\r\nimport { RouterItem } from './router.interface';\r\n\r\n@Component({\r\n  tag: 'abg-router',\r\n  styleUrl: 'router.scss',\r\n  shadow: false,\r\n})\r\nexport class Router {\r\n  @Prop() home: RouterItem;\r\n  @Prop() notFound: RouterItem;\r\n  @Prop() routes: RouterItem[];\r\n  @State() markup: string;\r\n\r\n  @Event() abgRouter: EventEmitter;\r\n\r\n  // Handles routing based on hashroutes\r\n  locationHandler = async () => {\r\n    // split has if child route\r\n\r\n    let location = window.location.hash.replace('#', '').split('/');\r\n\r\n    // find page routes\r\n    let route = location[0] == '' ? this.home : this.routes.find(item => item.slug === location[0]) || this.notFound;\r\n\r\n    // update based on route\r\n    document.title = route.title;\r\n    this.markup = route.markup;\r\n  };\r\n\r\n  // watch for prop changes\r\n  @Watch('routes')\r\n  routesHandler() {\r\n    this.locationHandler();\r\n  }\r\n\r\n  componentWillLoad() {\r\n    // Send event\r\n    this.abgRouter.emit();\r\n    // listen for hashevents and output to console\r\n    window.addEventListener('hashchange', () => {\r\n      this.locationHandler();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <Host innerHTML={this.markup}></Host>;\r\n  }\r\n}\r\n"]}